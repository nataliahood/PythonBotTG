import random
import telebot
from telebot import types
import os
import schedule
from threading import Thread
from time import sleep

folder_dir = 'pic'

file = open('support.txt', 'r', encoding='utf-8')
support = file.read().split('\n')
file.close()

file = open('stic.txt', 'r', encoding='utf-8')
stic = file.read().split('\n')
file.close()

bot = telebot.TeleBot('5593550302:AAEq5dkID1q0l_LnlnSY3YLQhxY162uVI1k')


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–ü—Ä–∏—É–Ω—ã–ªüòî')
    item2 = types.KeyboardButton('–°–æ–≤—Å–µ–º –ø—Ä–∏—É–Ω—ã–ªüòû')
    item3 = types.KeyboardButton('–ö—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª?')
    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id, '–ö–∞–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?üíú', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def get_handle_text(message):

    if message.text.strip() == '–ü—Ä–∏—É–Ω—ã–ªüòî' or message.text.strip() == '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏!':
        answer = random.choice(support)
        images = os.path.join(folder_dir, random.choice(os.listdir(folder_dir)))
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏!')
        item2 = types.KeyboardButton('–°–ø–∞—Å–∏–±–æ, –º–Ω–µ —É–∂–µ –ª—É—á—à–µüëçüèΩ')
        item3 = types.KeyboardButton('–°–æ–≤—Å–µ–º –ø—Ä–∏—É–Ω—ã–ªüòû')
        markup.add(item1, item2, item3)
        bot.send_message(message.chat.id, answer, reply_markup=markup)
        bot.send_photo(message.chat.id, photo=open(images, 'rb'))
    elif message.text.strip() == '–°–æ–≤—Å–µ–º –ø—Ä–∏—É–Ω—ã–ªüòû':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–°–ø–∞—Å–∏–±–æ, –º–Ω–µ —É–∂–µ –ª—É—á—à–µüëçüèΩ')
        markup.add(item1)
        bot.send_message(message.chat.id, '–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–∂–¥—ã–π –≤–µ—á–µ—Ä! –î–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —Ç–µ–±–µ –Ω–µ —Å—Ç–∞–Ω–µ—Ç –ª–µ–≥—á–µüòå', reply_markup=markup)
        user_id = message.from_user.id
        def function_to_run():
            bot.send_message(user_id, random.choice(support))
        schedule.every().minutes.do(function_to_run)
    elif message.text.strip() == '–°–ø–∞—Å–∏–±–æ, –º–Ω–µ —É–∂–µ –ª—É—á—à–µüëçüèΩ':
        stickers = str(random.choice(stic))
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–ü—Ä–∏—É–Ω—ã–ªüòî')
        item2 = types.KeyboardButton('–°–æ–≤—Å–µ–º –ø—Ä–∏—É–Ω—ã–ªüòû')
        item3 = types.KeyboardButton('–ö—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª?')
        markup.add(item1, item2, item3)
        bot.send_message(message.chat.id, '–û—á–µ–Ω—å —Ä–∞–¥ –∑–∞ —Ç–µ–±—è! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—åüòÅüëçüèΩ', reply_markup=markup)
        bot.send_sticker(message.chat.id, stickers)
        schedule.clear()
    elif message.text.strip() == '–ö—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª?':
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton('–°–∞–π—Ç-–≤–∏–∑–∏—Ç–∫–∞', url='https://nataliahood.github.io/')
        markup.add(button1)
        bot.send_message(message.chat.id, '–¢–µ–±–µ –ø—Ä–∞–≤–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?‚ò∫ –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ!'.format(message.from_user), reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–û–π... –∫–∞–∂–µ—Ç—Å—è, —è –µ—â–µ –Ω–µ —É–º–µ—é —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ãüò• –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ, –∂–º–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µüòä')
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEMszhitv7mZurHw02jOtUsHXmO9O84-QACDxUAAlAAATlItNCNfsmsILopBA')


def schedule_checker():
    while True:
        schedule.run_pending()
        sleep(1)


Thread(target=schedule_checker).start()


bot.polling(none_stop=True, interval=0)